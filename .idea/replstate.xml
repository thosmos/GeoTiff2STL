<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1471044000996">{:repl-history {:ide [], :local [&quot;(apply conj [0 1 2] [3 4 5])&quot; &quot;(-&gt; [0 1 2] (map apply conj [3 4 5]))&quot; &quot;(-&gt; [0 1 2] (map conj [3 4 5]))&quot; &quot;(-&gt; [0 1 2] (apply conj [3 4 5]))&quot; &quot;(-&gt; [0 1 2] (conj [3 4 5]))&quot; &quot;(-&gt; [0 1 2] (partial conj [3 4 5]))&quot; &quot;(-&gt; (transient [0 1 2]) (conj! 3 4 5))&quot; &quot;(-&gt; (transient [0 1 2]) (conj! 3 ))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (conj! 3)))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (apply conj! [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) #(apply conj! % [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) #(map % conj! [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) #(map conj! % [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (map #(conj! %) [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (reduce #(conj! %) [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (reduce apply #(conj! %) [3 4 5])))&quot; &quot;(persistent! (-&gt; (transient [0 1 2]) (reduce map #(conj! %) [3 4 5])))&quot; &quot;(-&gt; [0 1 2] (conj! 3 4 5))&quot; &quot;(-&gt; [0 1 2] (conj 3 4 5))&quot; &quot;(doseq [x (range 10)]\n  x)&quot; &quot;(for [x (range 10)]\n  x)&quot; &quot;(loop [x 0]\n  (if (&lt; x 10) \n    (recur (inc x))\n    x))&quot; &quot;(take 100 (for [x (range 100000000) y (range 1000000) :while (&lt; y x)] [x y]))&quot; &quot;(for [x (range 10) \n      y (range 10)\n      :let [xy (* x y)]\n      :while (&lt; xy 10)])&quot; &quot;(for [x (range 10) \n      y (range 10)\n      :let [xy (* x y)]\n      :while (&lt; xy 10)]\n  xy)&quot; &quot;(for [x (range 10) \n      y (range 10)\n      :let [xy (* x y)]\n      :while (&lt; x 10)]\n  xy)&quot; &quot;(for [x (range 10) \n      y (range 10)\n      :let [xy (* x y)]\n      :when (&lt; x 10)]\n  xy)&quot; &quot;(last (for [x (range 10)\n       y (range 10)\n       :let [xy (* x y)]\n       :when (&lt; x 10)]\n   xy))&quot; &quot;(last (for [x (range 10)\n       y (range 10)\n       :let [xy (* x y)]\n       :when (&lt; xy 10)]\n   xy))&quot; &quot;(float-array 10 10)&quot; &quot;(aset (float-array 10 10) 5 0 0.0)&quot; &quot;(aset (make-array Float/TYPE 10 10) 5 0 0.0)&quot; &quot;(aset-float (make-array Float/TYPE 10 10) 5 0 0.0)&quot; &quot;(def arr (make-array Float/TYPE 10 10))&quot; &quot;(aset-float arr 1 1 1.0)&quot; &quot;(aset-float arr 2 2 2.0)&quot; &quot;(def arr (make-array Float/TYPE 5 10))&quot; &quot;arr&quot; &quot;(aset-float arr 0 5 5.0)&quot; &quot;(pprint arr)&quot; &quot;(def hmap (make-array Float/TYPE 853 1325))&quot; &quot;(def width 1325)&quot; &quot;(def height 853) &quot; &quot;(doseq [h (range height) w (range width)]\n  (let [sample (.getSample raster w h 0)]\n    (if (&gt; sample -1)\n      (aset-float hmap h w sample))))&quot; &quot;(persistent! (-&gt; (transient [])\n     (conj! 1.0)))&quot; &quot;(persistent! \n  (-&gt; (transient [])\n     (conj! [1.0])))&quot; &quot;(persistent! \n  (-&gt; (transient [])\n     (conj! [1.0 2.0])))&quot; &quot;(persistent! \n  (-&gt; (transient [])\n     (conj! [1.0 2.0])\n      (concat)))&quot; &quot;(persistent! \n  (-&gt; (transient [])\n     (conj! [1.0 2.0])\n      concat))&quot; &quot;(concat (persistent!\n   (-&gt; (transient [])\n       (conj! [1.0 2.0])\n       )))&quot; &quot;(concat (persistent!\n   (-&gt; (transient [])\n       (conj! [1.0 2.0])\n       (conj! [3.0 4.0]))))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (conj! [1.0 2.0])\n      (conj! [3.0 4.0])))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (map conj! [1.0 2.0])\n      (map conj! [3.0 4.0])))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      #(map conj! % [1.0 2.0])\n      #(map conj! % [3.0 4.0])))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (fn [pts] (map conj! pts [1.0 2.0]))\n      ))&quot; &quot;(map conj [] [0.0 1.0])&quot; &quot;(map + [0.0 1.0])&quot; &quot;(map #(+ 1) [0.0 1.0])&quot; &quot;(map #(+ 1 %) [0.0 1.0])&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (fn [pts] (map #(conj! pts %) [1.0 2.0]))\n      ))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (fn [pts] (vec (map #(conj! pts %) [1.0 2.0])))\n      ))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      #(reduce (fn [in val] (conj! in val)) % [1.0 2.0])\n      ))&quot; &quot;(reduce (fn [in val] (conj! in val)) [] [1.0 2.0])&quot; &quot;(reduce (fn [in val] (conj in val)) [] [1.0 2.0])&quot; &quot;(reduce (fn [in val] (conj in val)) [0.0] [1.0 2.0])&quot; &quot;(reduce (fn [in val] (conj! in val)) (transient [0.0]) [1.0 2.0])&quot; &quot;(persistent! (reduce (fn [in val] (conj! in val)) (transient [0.0]) [1.0 2.0]))&quot; &quot;(persistent!\n  (-&gt; (transient [])\n      (fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0]))\n      ))&quot; &quot;(persistent!\n  ((fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0])) (transient [])))&quot; &quot;(persistent!\n  ((fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0])) (transient [0.0])))&quot; &quot;(persistent!\n  (-&gt; (transient [0.0])\n      (partial (fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0])))))&quot; &quot;(persistent!\n  (-&gt; (transient [0.0])\n      (fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0]))))&quot; &quot;(persistent!\n  (-&gt; (transient [0.0])\n      (conj! 3.0)\n      ))&quot; &quot;(persistent!\n  (-&gt; (transient [0.0])\n      (conj! 3.0)\n      (fn [pts] (reduce (fn [in val] (conj! in val)) pts [1.0 2.0]))))&quot; &quot;(persistent!\n  (-&gt; (transient [0.0])\n      (conj! 3.0)\n      (conj! 4.0)))&quot; &quot;(reduce max [0 1 2 3])&quot; &quot;(max [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce max (map max [[1 2 3] [3 4 5] [6 7 8]]))&quot; &quot;(map max [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(max [1 2 3])&quot; &quot;(apply max [1 2 3])&quot; &quot;(map apply max [1 2 3])&quot; &quot;(map max [1 2 3])&quot; &quot;(reduce + [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce max [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce #(apply max %) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce #(reduce max %) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce #(identity %) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(map (fn [x] x) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] y) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] (apply max y)) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] (apply max x y)) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] (max x)) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] (apply max x)) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] x) [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] x) 0 [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [x y] (max x (apply max y))) 0 [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [in next] (max in (apply max next))) 0 [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [in next] (max in (apply max next))) 5 [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(reduce (fn [in next] (max in (apply max next))) 9 [[1 2 3] [3 4 5] [6 7 8]])&quot; &quot;(-main \&quot;../yuba/yuba.tif\&quot;)&quot;], :remote []}}</component>
</project>